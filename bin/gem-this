#!/usr/bin/env ruby

args = ARGV.dup

if args.first =~ /-?-h/
  puts "Creates a Rakefile suitable for turning the current project into a gem."
  puts "Usage: #{__FILE__} [-d -h] [gem name]"
  puts "If a gem name is not given, the name of the current directory will be used as the gem"
  puts "-h    help, prints out this message."
  puts "-d    debug, only prints out the generated Rakefile."
  exit(0)
end

debug = args.delete("-d")

gem_name = args.first || File.basename(Dir.pwd)

def using_rspec?
  File.directory?('spec')
end

def using_test_unit?
  File.directory?('test')
end

def has_executables?
  File.directory?('bin')
end

def dirs_to_include
  %w(bin test spec lib).select { |d| File.directory?(d) }.join(",")
end

def readme
  Dir['*'].find { |f| f =~ /readme/i }
end

def files_in_root
  Dir['*'].reject { |f| File.directory?(f) }.join(" ")
end

def using_git?
  File.exist?(".git")
end

def add_to_gitignore
  ignores = File.readlines(".gitignore") if File.exist?(".gitignore")
  ignores += ["pkg", "rdoc"]
  File.open(".gitignore", "w") { |f| f.write ignores.map { |l| l.strip }.uniq.join("\n") }
end

require 'erb'

template = ERB.new File.read(File.join(File.dirname(__FILE__), '..', 'Rakefile.erb')), nil, '<>'
rakefile = template.result(binding)

if debug
  puts rakefile
  exit(0)
else
  if File.exist?('Rakefile')
    puts "Appended to existing Rakefile"
    File.open('Rakefile', 'a') { |f| 2.times { f.puts }; f.write rakefile }
  else
    puts "Writing new Rakefile"
    File.open('Rakefile', 'w') { |f| f.write rakefile }
  end
  add_to_gitignore if using_git?
end

exit(0)